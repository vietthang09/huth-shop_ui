// datasource and generator blocks
datasource db {
  provider = "mysql" // Or "postgresql", "sqlite", "sqlserver", "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Models based on the ERD

model Users {
  id        Int      @id @default(autoincrement())
  fullname  String?
  email     String   @unique
  password  String   // Remember to hash passwords in your application
  role      String?  // e.g., "admin", "customer"

  posts     Posts[]
  logs      Logs[]
  orders    Orders[]
}

model Suppliers {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  products Products[]
}

model Products {
  id          Int      @id @default(autoincrement())
  sku         String  @unique // Stock Keeping Unit, usually unique
  title       String
  supplierId  Int?
  supplier    Suppliers? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  properties  Properties[] // These represent product variants based on attribute sets
  logs        Logs[]

  @@index([supplierId])
}

// Defines a unique set of attribute values (e.g., "Color:Red, Size:M")
// identified by a unique 'properties_hash'.
model Attributes {
  id              Int      @id @default(autoincrement())
  name            String?  // Optional descriptive name for the attribute set/hash
  properties_hash String   @unique // The unique hash identifying this attribute set

  // Relation to Properties entries that use this specific attribute set
  propertyEntries Properties[] @relation("AttributeSetToProperties")
}

// Represents a specific product variant, linking a Product to an Attribute set
// and defining prices for that variant.
model Properties {
  id             Int    @id @default(autoincrement()) // Primary key for this variant
  productId      Int
  product        Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Foreign key to the Attributes table, identifying the set of attributes for this variant
  attributeSetHash String
  attributeSet   Attributes @relation("AttributeSetToProperties", fields: [attributeSetHash], references: [properties_hash])

  net_price      Decimal  @db.Decimal(10, 2)
  retail_price   Decimal  @db.Decimal(10, 2)

  inventory      Inventory?    // Each product variant has one inventory record
  order_items    Order_Items[]

  // A product should have only one variant for a given attribute set
  @@unique([productId, attributeSetHash])
  @@index([attributeSetHash])
}

model Inventory {
  id           Int      @id @default(autoincrement())
  // Links to the specific product variant (Properties entry) this inventory record is for
  propertiesId Int      @unique // Ensures one-to-one relationship: one inventory record per product variant
  property     Properties @relation(fields: [propertiesId], references: [id], onDelete: Cascade)

  quantity     Int      @default(0) // Stock quantity

  // The ERD shows 'properties_hash' on Inventory. This could be a denormalized copy
  // from the related Properties -> attributeSetHash for easier lookups if needed,
  // but the primary relational link is propertiesId.
  // properties_hash_value String?
  // @@index([properties_hash_value])
}

model Orders {
  id          Int      @id @default(autoincrement())
  userId      Int?     // An order might be placed by a guest or a registered user
  user        Users?   @relation(fields: [userId], references: [id], onDelete: SetNull) // SetNull if user is deleted
  total       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt // Automatically updated on modification

  order_items Order_Items[]
  // You might add other fields like status, shippingAddress, etc.

  @@index([userId])
}

model Order_Items {
  id            Int      @id @default(autoincrement())
  orderId       Int
  order         Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade) // If order is deleted, items are deleted

  // Refers to the specific product variant (Properties entry) that was ordered
  propertiesId  Int
  property      Properties @relation(fields: [propertiesId], references: [id], onDelete: Restrict) // Prevent deletion of a variant if it's in an order

  net_price     Decimal  @db.Decimal(10, 2) // Price at the time of purchase
  retail_price  Decimal  @db.Decimal(10, 2) // Price at the time of purchase
  quantity      Int

  @@index([orderId])
  @@index([propertiesId])
}

model Posts {
  id                Int      @id @default(autoincrement())
  userId            Int?     // Author of the post
  user              Users?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  slug              String   @unique
  title             String
  short_description String?  @db.Text
  content           String?  @db.Text
  cover             String?  // URL to a cover image
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  logs              Logs[]

  @@index([userId])
}

model Logs {
  id          Int      @id @default(autoincrement())
  userId      Int?     // User who performed the action, or related to the log
  user        Users?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  productId   Int?     // Product related to the log
  product     Products? @relation(fields: [productId], references: [id], onDelete: SetNull)
  postId      Int?     // Post related to the log
  post        Posts?   @relation(fields: [postId], references: [id], onDelete: SetNull)
  title       String?  // e.g., "USER_LOGIN", "PRODUCT_UPDATED"
  description String?  @db.Text // More details about the logged event
  created_at  DateTime @default(now())

  @@index([userId])
  @@index([productId])
  @@index([postId])
}