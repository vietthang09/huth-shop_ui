// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  parentID String? @db.ObjectId

  name               String
  url                String
  iconUrl            String?
  iconSize           Int[]
  Category_Option    Category_OptionSet[]
  Category_SpecGroup Category_SpecGroup[]
  products           Product[]
}

model Category_OptionSet {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  option     OptionSet @relation(fields: [optionID], references: [id], onDelete: Cascade)
  optionID   String    @db.ObjectId
  category   Category  @relation(fields: [categoryID], references: [id])
  categoryID String    @db.ObjectId

  @@unique([optionID, categoryID])
}

model OptionSet {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  options         NameValue[]
  type            OptionSetType
  Category_Option Category_OptionSet[]
}

type NameValue {
  name  String
  value String
}

model Category_SpecGroup {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  specGroup   SpecGroup @relation(fields: [specGroupID], references: [id], onDelete: Cascade)
  specGroupID String    @db.ObjectId
  category    Category  @relation(fields: [categoryID], references: [id])
  categoryID  String    @db.ObjectId

  @@unique([specGroupID, categoryID])
}

model SpecGroup {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  specs              String[]
  Category_SpecGroup Category_SpecGroup[]
}

enum OptionSetType {
  TEXT
  COLOR
}

model Product {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  desc              String?
  richDesc          String?
  price             Float
  salePrice         Float?
  images            String[]
  specialFeatures   String[]
  isAvailable       Boolean    @default(true)
  specifications    Json?     
  isHotDeal         Boolean    @default(false)
  hotDealOrder      Int?
  fromColor         String?
  toColor           String?
  category          Category      @relation(fields: [categoryID], references: [id])
  categoryID        String        @db.ObjectId
  optionSets        String[]      @db.ObjectId
  specs             ProductSpec[]
  brand             Brand         @relation(fields: [brandID], references: [id])
  brandID           String        @db.ObjectId
  PageVisit         PageVisit[]
  isTopSelling      Boolean  @default(false)
  topSellingOrder   Int?
  orderItems       OrderItem[]
}

type ProductSpec {
  specGroupID String
  specValues  String[]
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
}

model PageVisit {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  time             DateTime? @default(now())
  pageType         PageType
  pagePath         String?
  deviceResolution String?
  productID        String?   @db.ObjectId
  product          Product?  @relation(fields: [productID], references: [id])
}

enum PageType {
  MAIN
  LIST
  PRODUCT
}

// ---------------------- USER MANAGEMENT SECTION ---------------------- 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String    @default("customer") // Add role field with default value "customer"
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  blogs          Blog[]    // Add this field to create the relation with blogs
  orders       Order[]
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  status        OrderStatus @default(PENDING)
  total         Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]
  shippingInfo  ShippingInfo?
  paymentInfo   PaymentInfo?
}

model OrderItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String  @db.ObjectId
  order       Order   @relation(fields: [orderId], references: [id])
  productId   String  @db.ObjectId
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float
  totalPrice  Float
}

model ShippingInfo {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String  @unique @db.ObjectId
  order       Order   @relation(fields: [orderId], references: [id])
  fullName    String
  address     String
  city        String
  province    String
  postalCode  String
  phone       String
}

model PaymentInfo {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String   @unique @db.ObjectId
  order         Order    @relation(fields: [orderId], references: [id])
  amount        Float
  method        String   @default("bank_transfer")
  status        String   @default("pending")
  transactionId String?
  paidAt        DateTime?
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// ---------------------- BLOG SECTION ----------------------
model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  shortText   String?
  imgUrl      String?
  slug        String   @unique
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?  @db.ObjectId
}
